// Dungeon
// 2018 Will Smith (minkcv)

// The entire segment 128.* is used for 
// storing the dungeon layout
// Dungoen map is 16x16
// TODO: make the map in ROM with some tool
// Lower 4 bits of a byte indicate door configuration
// Upper 4 bits of a byte are an offset into room layout segment
const MAP_SEGMENT 128;
const MAP_WIDTH 16;
const MAP_HEIGHT 16;
const DOOR_LAYOUT_COUNT 16;

// Door layout types
const DOOR_NO_ROOM 0;
const DOOR_CROSS 1;
const DOOR_HORIZONTAL 2;
const DOOR_VERTICAL 3;
const DOOR_TEE_DOWN 4;
const DOOR_TEE_UP 5;
const DOOR_TEE_LEFT 6;
const DOOR_TEE_RIGHT 7;
const DOOR_ELBOW_UP_RIGHT 8;
const DOOR_ELBOW_DOWN_RIGHT 9;
const DOOR_ELBOW_DOWN_LEFT 10;
const DOOR_ELBOW_UP_LEFT 11;
const DOOR_DEAD_LEFT 12;
const DOOR_DEAD_RIGHT 13;
const DOOR_DEAD_UP 14;
const DOOR_DEAD_DOWN 15;

const ROOM_WIDTH 14;
const ROOM_HEIGHT 12;

// Room layouts are stored in this segment in ROM
const ROOM_LAYOUT_SEGMENT 129;
const ROOM_LAYOUT_COUNT 16;
// Room layouts omit outer walls
// and are a 12x10 area
const ROOM_LAYOUT_WIDTH 12;
const ROOM_LAYOUT_HEIGHT 10;

// Room layout types
const ROOM_EMPTY 0;
// TODO make room types with some tool and store in rom
// Careful not to put too many sprites in a room
// there is a max of 256 on the screen
// and we have used 24 on room bounds already
// We need some left for the player, enemies, and UI
const ROOM_CORNER_SPIKES 1;
const ROOM_CORNER_WALLS 2;

// Lower 4 bits of byte indicate tile type.
// Upper 4 bits of byte indicate tile sprite.
const TILE_TYPE_COUNT 16;
const TILE_SPRITE_COUNT 16;

// Tile types
const TILE_T_EMPTY 0;
const TILE_T_WALL 1;
const TILE_T_SPIKES 2;

// Tile sprites
const TILE_S_BOX 0;
const TILE_S_BRICK 1;
const TILE_S_SPIKES 2;
const TILE_S_TORCH 3;

var map_x;
var map_y;

// Common locals
var i;
var x;
var y;

// Locals for sprite rendering
var sprite_index;
var sprite_segment;

[ 127 , 17 ] = 1; // Enable GPU

func renderRoomBorder {
    sprite_segment = 64;
    sprite_index = 0;
    // -- Top left corner
    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    // [ sprite_segment , sprite_index + 1] = 0; // X
    // [ sprite_segment , sprite_index + 2] = 0; // Y
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    // Corner wall sprite is at the start of ROM so the address is [ 128 , 0 ]
    [ sprite_segment , sprite_index + 5] = 128; // Sprite segment
    // [ sprite_segment , sprite_index + 6] = 0; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 3; // Blue in 256 color palette
    // [ sprite_segment , sprite_index + 8] = 0; // Unused color
    // [ sprite_segment , sprite_index + 9] = 0; // Unused color
    // [ sprite_segment , sprite_index + 10] = 0; // Unused color
    sprite_index = sprite_index + 16; // Move to next sprite attribute

    // -- Top right corner
    [ sprite_segment , sprite_index ] = 208; // Enable, transparent, and flip horizontally
    [ sprite_segment , sprite_index + 1] = 192; // X: 12 tiles, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 0; // Y
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    [ sprite_segment , sprite_index + 5] = 128; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 3; // Blue in 256 color palette
    sprite_index = sprite_index + 16; // Move to next sprite attribute

    // -- Bottom right corner
    [ sprite_segment , sprite_index ] = 240; // Enable, transparent and flip horizontally and vertically
    [ sprite_segment , sprite_index + 1] = 192; // X: 12 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 160; // Y: 10 tiles over, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    [ sprite_segment , sprite_index + 5] = 128; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 3; // Blue in 256 color palette
    sprite_index = sprite_index + 16; // Move to next sprite attribute

    // -- Bottom left corner
    [ sprite_segment , sprite_index ] = 176; // Enable, transparent, and flip vertically
    [ sprite_segment , sprite_index + 1] = 0; // X
    [ sprite_segment , sprite_index + 2] = 160; // Y: 10 tiles over, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    [ sprite_segment , sprite_index + 5] = 128; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 3; // Blue in 256 color palette
    
}
