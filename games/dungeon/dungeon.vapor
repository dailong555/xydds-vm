// Dungeon
// 2018 Will Smith (minkcv)

// The entire segment TODO.* is used for 
// storing the dungeon layout
// Dungoen map is 16x16
// The map layout is created with map.py
// Lower 4 bits of a byte indicate door configuration
// Upper 4 bits of a byte are an offset into room layout segment
const MAP_SEGMENT 131;

// Map width and height in units of rooms
const MAP_WIDTH 16;
const MAP_HEIGHT 16;
const DOOR_LAYOUT_COUNT 16;

// Door layout types for a room
const DOOR_NO_ROOM 0;
const DOOR_CROSS 1;
const DOOR_HORIZONTAL 2;
const DOOR_VERTICAL 3;
// Tee down indicates that the the open doors are left, down, and right. Up is closed
const DOOR_TEE_DOWN 4;
const DOOR_TEE_UP 5;
const DOOR_TEE_LEFT 6;
const DOOR_TEE_RIGHT 7;
const DOOR_ELBOW_UP_RIGHT 8;
const DOOR_ELBOW_DOWN_RIGHT 9;
const DOOR_ELBOW_DOWN_LEFT 10;
const DOOR_ELBOW_UP_LEFT 11;
const DOOR_DEAD_LEFT 12;
const DOOR_DEAD_RIGHT 13;
const DOOR_DEAD_UP 14;
const DOOR_DEAD_DOWN 15;

const ROOM_WIDTH 14;
const ROOM_HEIGHT 12;

// Room layouts are stored starting at this segment in ROM
// Room layouts are 128 bytes each so 2 fit in a segment.
const ROOM_LAYOUT_SEGMENT 132;
const ROOM_LAYOUT_COUNT 16;
const ROOM_LAYOUT_SIZE 128;
// Room layouts omit outer walls
// and are a 12x10 area
// with tile types and tile sprites
// see TILE_T_* and TILE_S_*
const ROOM_LAYOUT_WIDTH 12;
const ROOM_LAYOUT_HEIGHT 10;


// Room layout types
const ROOM_EMPTY 0;
// The room layouts are created in map.py
// Careful not to put too many sprites in a room
// there is a max of 256 on the screen
// and we have used 24 on room bounds already
// We need some left for the player, enemies, and UI
const ROOM_CORNER_WALLS 1;
const ROOM_CORNER_SPIKES 2;

// Lower 4 bits of byte indicate tile type
// Upper 4 bits of byte indicate tile sprite
const TILE_TYPE_COUNT 16;
const TILE_SPRITE_COUNT 16;

// Tile types
const TILE_T_EMPTY 0;
const TILE_T_WALL 1;
const TILE_T_SPIKES 2;

// Tile sprites
const TILE_S_BOX 0;
const TILE_S_BRICK 1;
const TILE_S_SPIKES 2;
const TILE_S_TORCH 3;

const MAP_START_X 7;
const MAP_START_Y 7;

var map_x;
var map_y;
var map_index; // x + (y * MAP_HEIGHT)
var room_layout;
var door_layout;
var has_top_door;
var has_bottom_door;
var has_left_door;
var has_right_door;
var room_index;
var room_segment;

// Common locals
var i;
var tmp;
var x;
var y;

// Locals for sprite rendering
var sprite_index;
var sprite_segment;

[ 127 , 17 ] = 1; // Enable GPU

map_x = MAP_START_X;
map_y = MAP_START_Y;

// Main loop
while 1 {
    call loadRoom;
    call renderRoomDoors;
    call renderRoomTiles;
    call renderRoomBorder;
}

// Sets room_layout and door_layout
// Based on map_x and map_y
func loadRoom {
    i = 0;
    map_index = 0;
    while i < map_y {
        map_index = map_index + MAP_HEIGHT;
        i = i + 1;
    }
    map_index = map_index + map_x;
    room_layout = [ MAP_SEGMENT , map_index ];
    door_layout = room_layout & 15; // 0000 1111 mask
    room_layout = room_layout & 240; // 1111 0000 mask
    room_layout = room_layout >> 4;
    room_segment = ROOM_LAYOUT_SEGMENT;
    room_index = 0;
    i = 0;
    while i < room_layout - 1 {
        if room_index == 128 {
            room_segment = room_segment + 1;
        }
        room_index = room_index + ROOM_LAYOUT_SIZE;
        i = i + 1;
    }
}

// Uses sprite attributes 66.16 through 66.64 (inclusive)
// Sets has_top_door, has_bottom_door, has_left_door, has_right_door
// Based on door_layout
func renderRoomDoors {
    sprite_segment = 66;
    sprite_index = 16;

    // Top door
    has_top_door = door_layout == DOOR_CROSS;
    tmp = door_layout == DOOR_DEAD_UP;
    has_top_door = tmp | has_top_door;
    tmp = door_layout == DOOR_ELBOW_UP_LEFT;
    has_top_door = tmp | has_top_door;
    tmp = door_layout == DOOR_ELBOW_UP_RIGHT;
    has_top_door = tmp | has_top_door;
    tmp = door_layout == DOOR_VERTICAL;
    has_top_door = tmp | has_top_door;
    tmp = door_layout == DOOR_TEE_LEFT;
    has_top_door = tmp | has_top_door;
    tmp = door_layout == DOOR_TEE_UP;
    has_top_door = tmp | has_top_door;
    tmp = door_layout == DOOR_TEE_RIGHT;
    has_top_door = tmp | has_top_door;
    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 1] = 96; // X: 6 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    if has_top_door {
        // Door horizontal sprite is at [ 130 , 0 ]
        [ sprite_segment , sprite_index + 5] = 130; // Sprite segment
        [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 8] = 0; // Color from output of `convertsprite`
    }
    if has_top_door == 0 {
        // Horizontal wall sprite is at [ 129 , 0 ]
        [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
        [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    }
    sprite_index = 32;

    // Bottom door
    has_bottom_door = door_layout == DOOR_CROSS;
    tmp = door_layout == DOOR_DEAD_DOWN;
    has_bottom_door = tmp | has_bottom_door;
    tmp = door_layout == DOOR_ELBOW_DOWN_LEFT;
    has_bottom_door = tmp | has_bottom_door;
    tmp = door_layout == DOOR_ELBOW_DOWN_RIGHT;
    has_bottom_door = tmp | has_bottom_door;
    tmp = door_layout == DOOR_VERTICAL;
    has_bottom_door = tmp | has_bottom_door;
    tmp = door_layout == DOOR_TEE_LEFT;
    has_bottom_door = tmp | has_bottom_door;
    tmp = door_layout == DOOR_TEE_DOWN;
    has_bottom_door = tmp | has_bottom_door;
    tmp = door_layout == DOOR_TEE_RIGHT;
    has_bottom_door = tmp | has_bottom_door;
    [ sprite_segment , sprite_index ] = 176; // Enable, transparency, and flip vertically
    [ sprite_segment , sprite_index + 1] = 96; // X: 6 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 176; // Y: 11 tiles down, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    if has_bottom_door {
        // Door horizontal sprite is at [ 130 , 0 ]
        [ sprite_segment , sprite_index + 5] = 130; // Sprite segment
        [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 8] = 0; // Color from output of `convertsprite`
    }
    if has_bottom_door == 0 {
        // Horizontal wall sprite is at [ 129 , 0 ]
        [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
        [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    }
    sprite_index = 48;

    // Left door
    has_left_door = door_layout == DOOR_CROSS;
    tmp = door_layout == DOOR_DEAD_LEFT;
    has_left_door = tmp | has_left_door;
    tmp = door_layout == DOOR_ELBOW_DOWN_LEFT;
    has_left_door = tmp | has_left_door;
    tmp = door_layout == DOOR_ELBOW_UP_LEFT;
    has_left_door = tmp | has_left_door;
    tmp = door_layout == DOOR_HORIZONTAL;
    has_left_door = tmp | has_left_door;
    tmp = door_layout == DOOR_TEE_LEFT;
    has_left_door = tmp | has_left_door;
    tmp = door_layout == DOOR_TEE_DOWN;
    has_left_door = tmp | has_left_door;
    tmp = door_layout == DOOR_TEE_UP;
    has_left_door = tmp | has_left_door;
    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 2] = 80; // Y: 5 tiles down, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    if has_left_door {
        // Door vertical sprite is at [ 130 , 128 ]
        [ sprite_segment , sprite_index + 5] = 130; // Sprite segment
        [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
        [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 8] = 0; // Color from output of `convertsprite`
    }
    if has_left_door == 0 {
        // Vertical wall sprite is at [ 129 , 128 ]
        [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
        [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
        [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    }
    sprite_index = 64;

    // Right door
    has_right_door = door_layout == DOOR_CROSS;
    tmp = door_layout == DOOR_DEAD_RIGHT;
    has_right_door = tmp | has_right_door;
    tmp = door_layout == DOOR_ELBOW_DOWN_RIGHT;
    has_right_door = tmp | has_right_door;
    tmp = door_layout == DOOR_ELBOW_UP_RIGHT;
    has_right_door = tmp | has_right_door;
    tmp = door_layout == DOOR_HORIZONTAL;
    has_right_door = tmp | has_right_door;
    tmp = door_layout == DOOR_TEE_RIGHT;
    has_right_door = tmp | has_right_door;
    tmp = door_layout == DOOR_TEE_DOWN;
    has_right_door = tmp | has_right_door;
    tmp = door_layout == DOOR_TEE_UP;
    has_right_door = tmp | has_right_door;
    [ sprite_segment , sprite_index ] = 208; // Enable, transparency, and flip horizontally
    [ sprite_segment , sprite_index + 1] = 208; // X: 13 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 80; // Y: 5 tiles down, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    if has_right_door {
        // Door vertical sprite is at [ 130 , 128 ]
        [ sprite_segment , sprite_index + 5] = 130; // Sprite segment
        [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
        [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 8] = 0; // Color from output of `convertsprite`
    }
    if has_right_door == 0 {
        // Vertical wall sprite is at [ 129 , 128 ]
        [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
        [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
        [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
        [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    }
}

func renderRoomTiles {

}

// Uses sprite attributes at addresses 64.0 through 66.0 (inclusive)
func renderRoomBorder {
    // Set up sprite attributes to render the room.
    // These should only be done once at the start.
    sprite_segment = 64;
    sprite_index = 0;
    // -- Top left corner
    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    // [ sprite_segment , sprite_index + 1] = 0; // X
    // [ sprite_segment , sprite_index + 2] = 0; // Y
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    // Corner wall sprite is at the start of ROM so the address is [ 128 , 0 ]
    [ sprite_segment , sprite_index + 5] = 128; // Sprite segment
    // [ sprite_segment , sprite_index + 6] = 0; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    // [ sprite_segment , sprite_index + 10] = 0; // Unused color (we're using transparency)
    sprite_index = 32; // Move to next sprite attribute

    // -- Top right corner
    [ sprite_segment , sprite_index ] = 208; // Enable, transparent, and flip horizontally
    [ sprite_segment , sprite_index + 1] = 192; // X: 12 tiles, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 0; // Y
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    [ sprite_segment , sprite_index + 5] = 128; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 48; // Move to next sprite attribute

    // -- Bottom right corner
    [ sprite_segment , sprite_index ] = 240; // Enable, transparent and flip horizontally and vertically
    [ sprite_segment , sprite_index + 1] = 192; // X: 12 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 160; // Y: 10 tiles over, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    [ sprite_segment , sprite_index + 5] = 128; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 64; // Move to next sprite attribute

    // -- Bottom left corner
    [ sprite_segment , sprite_index ] = 176; // Enable, transparent, and flip vertically
    [ sprite_segment , sprite_index + 1] = 0; // X
    [ sprite_segment , sprite_index + 2] = 160; // Y: 10 tiles over, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    [ sprite_segment , sprite_index + 5] = 128; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 80; // Move to next sprite attribute
    
    // -- Top walls (but not door area)
    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 1] = 32; // X: 2 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 96; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 1] = 64; // X: 4 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 112; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 1] = 128; // X: 8 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 128; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 1] = 160; // X: 10 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 144; // Move to next sprite attribute

    // -- Bottom Walls (but not door area)
    [ sprite_segment , sprite_index ] = 176; // Enable, transparency, and flip vertically
    [ sprite_segment , sprite_index + 1] = 32; // X: 2 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 176; // Y: 11 tiles down, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 160; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 176; // Enable, transparency, and flip vertically
    [ sprite_segment , sprite_index + 1] = 64; // X: 4 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 176; // Y: 11 tiles down, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 176; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 176; // Enable, transparency, and flip vertically
    [ sprite_segment , sprite_index + 1] = 128; // X: 8 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 176; // Y: 11 tiles down, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 192; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 176; // Enable, transparency, and flip vertically
    [ sprite_segment , sprite_index + 1] = 160; // X: 10 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 176; // Y: 11 tiles down, each 16 pixels wide
    [ sprite_segment , sprite_index + 3] = 32; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 208; // Move to next sprite attribute

    // -- Left Walls (but not door area)
    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 2] = 32; // Y: 2 tiles down, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    // Vertical wall sprite is at at [ 129 , 128 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 224; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 2] = 64; // Y: 4 tiles down, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height (short wall tile)
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 240; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 2] = 112; // Y: 7 tiles down, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height (short wall tile)
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_segment = 65; // Use next segment of sprite attributes
    sprite_index = 0; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 144; // Enable and use transparency
    [ sprite_segment , sprite_index + 2] = 128; // Y: 8 tiles down, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 16; // Move to next sprite attribute

    // -- Right Walls (but not door area)
    [ sprite_segment , sprite_index ] = 208; // Enable, transparency, and flip horizontally
    [ sprite_segment , sprite_index + 1] = 208; // X: 13 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 32; // Y: 2 tiles down, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    // Vertical wall sprite is at at [ 129 , 128 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 224; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 208; // Enable, transparency, and flip horizontally
    [ sprite_segment , sprite_index + 1] = 208; // X: 13 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 64; // Y: 4 tiles down, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height (short wall tile)
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_index = 240; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 208; // Enable, transparency, and flip horizontally
    [ sprite_segment , sprite_index + 1] = 208; // X: 13 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 112; // Y: 7 tiles down, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 16; // Height (short wall tile)
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
    sprite_segment = 66; // Use next segment of sprite attributes
    sprite_index = 0; // Move to next sprite attribute

    [ sprite_segment , sprite_index ] = 208; // Enable, transparency, and flip horizontally
    [ sprite_segment , sprite_index + 1] = 208; // X: 13 tiles over, each 16 pixels wide
    [ sprite_segment , sprite_index + 2] = 128; // Y: 8 tiles down, each 16 pixels tall
    [ sprite_segment , sprite_index + 3] = 16; // Width
    [ sprite_segment , sprite_index + 4] = 32; // Height
    // Horizontal wall sprite is at at [ 129 , 0 ]
    [ sprite_segment , sprite_index + 5] = 129; // Sprite segment
    [ sprite_segment , sprite_index + 6] = 128; // Sprite offset
    [ sprite_segment , sprite_index + 7] = 73; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 8] = 4; // Color from output of `convertsprite`
    [ sprite_segment , sprite_index + 9] = 52; // Color from output of `convertsprite`
}
